{
    "swagger": "2.0",
    "info": {
        "title": "Polls API",
        "description": "API for creating polls, voting, and fetching results",
        "license": {
            "name": "BSD License"
        },
        "version": "v1"
    },
    "basePath": "/api",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT or Token authorization. Example: \"Bearer {token}\""
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ],
    "paths": {
        "/auth/login/": {
            "post": {
                "operationId": "auth_login_create",
                "summary": "User login",
                "description": "Authenticate user with email and password. Returns JWT tokens and user data.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "email",
                                "password"
                            ],
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens with user data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access": {
                                    "description": "JWT access token",
                                    "type": "string"
                                },
                                "refresh": {
                                    "description": "JWT refresh token",
                                    "type": "string"
                                },
                                "user": {
                                    "description": "User profile data",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "authentication"
                ]
            },
            "parameters": []
        },
        "/auth/logout/": {
            "post": {
                "operationId": "auth_logout_create",
                "summary": "User logout",
                "description": "Logout authenticated user and invalidate session.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "examples": {
                            "application/json": {
                                "detail": "Successfully logged out."
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "authentication"
                ]
            },
            "parameters": []
        },
        "/auth/password/change/": {
            "put": {
                "operationId": "auth_password_change_update",
                "summary": "Change password",
                "description": "Change authenticated user's password. Requires current password for verification.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "current_password",
                                "new_password",
                                "new_password_confirm"
                            ],
                            "type": "object",
                            "properties": {
                                "current_password": {
                                    "type": "string"
                                },
                                "new_password": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                },
                                "new_password_confirm": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "examples": {
                            "application/json": {
                                "detail": "Password updated successfully."
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "password"
                ]
            },
            "patch": {
                "operationId": "auth_password_change_partial_update",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ChangePassword"
                        }
                    }
                },
                "tags": [
                    "auth"
                ]
            },
            "parameters": []
        },
        "/auth/password/reset/": {
            "post": {
                "operationId": "auth_password_reset_create",
                "summary": "Request password reset",
                "description": "Request password reset email. Always returns success to prevent email enumeration.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "email"
                            ],
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent if account exists",
                        "examples": {
                            "application/json": {
                                "detail": "If the email exists, a password reset link has been sent."
                            }
                        }
                    }
                },
                "tags": [
                    "password"
                ]
            },
            "parameters": []
        },
        "/auth/password/reset/confirm/": {
            "post": {
                "operationId": "auth_password_reset_confirm_create",
                "summary": "Confirm password reset",
                "description": "Confirm password reset using token from email. Token expires in 1 hour.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "token",
                                "new_password",
                                "new_password_confirm"
                            ],
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                },
                                "new_password": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                },
                                "new_password_confirm": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "examples": {
                            "application/json": {
                                "detail": "Password reset successfully."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "examples": {
                            "application/json": {
                                "detail": "Invalid or expired token."
                            }
                        }
                    }
                },
                "tags": [
                    "password"
                ]
            },
            "parameters": []
        },
        "/auth/registration/": {
            "post": {
                "operationId": "auth_registration_create",
                "summary": "Register new user",
                "description": "Creates a new user accountUsername is auto-generated from email.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "email",
                                "password",
                                "password_confirm"
                            ],
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                },
                                "password": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                },
                                "password_confirm": {
                                    "type": "string",
                                    "maxLength": 128,
                                    "minLength": 8
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "user_id": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "User registered successfully.",
                                "user_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "authentication"
                ]
            },
            "parameters": []
        },
        "/auth/token/refresh/": {
            "post": {
                "operationId": "auth_token_refresh_create",
                "summary": "Refresh JWT token",
                "description": "Refresh JWT access token using refresh token.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "refresh"
                            ],
                            "type": "object",
                            "properties": {
                                "refresh": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access": {
                                    "type": "string"
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "tokens"
                ]
            },
            "parameters": []
        },
        "/auth/token/verify/": {
            "post": {
                "operationId": "auth_token_verify_create",
                "summary": "Verify JWT token",
                "description": "Verify validity of JWT access token.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "token"
                            ],
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid"
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "tokens"
                ]
            },
            "parameters": []
        },
        "/auth/user/": {
            "get": {
                "operationId": "auth_user_read",
                "summary": "Get user profile",
                "description": "Retrieve authenticated user's profile information.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                },
                                "date_joined": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "profile"
                ]
            },
            "put": {
                "operationId": "auth_user_update",
                "summary": "Update user profile",
                "description": "Update authenticated user's profile information. Email cannot be changed.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "first_name": {
                                    "type": "string",
                                    "maxLength": 50
                                },
                                "last_name": {
                                    "type": "string",
                                    "maxLength": 50
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                },
                                "date_joined": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "profile"
                ]
            },
            "patch": {
                "operationId": "auth_user_partial_update",
                "summary": "Partial update user profile",
                "description": "Partially update authenticated user's profile information.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "first_name": {
                                    "type": "string",
                                    "maxLength": 50
                                },
                                "last_name": {
                                    "type": "string",
                                    "maxLength": 50
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email"
                                },
                                "date_joined": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "profile"
                ]
            },
            "parameters": []
        },
        "/my-votes/": {
            "get": {
                "operationId": "my-votes_list",
                "description": "ViewSet for users to view their own votes.\nVotes are permanent and cannot be modified or deleted.\nVotes are created through poll vote endpoint",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Which field to use when ordering the results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserVote"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "my-votes"
                ]
            },
            "parameters": []
        },
        "/my-votes/by_poll/": {
            "get": {
                "operationId": "my-votes_by_poll",
                "description": "Retrieve user's vote on a poll",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Which field to use when ordering the results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "poll_id",
                        "in": "query",
                        "description": "Filter vote by poll",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/UserVote"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "my-votes"
                ]
            },
            "parameters": []
        },
        "/my-votes/{id}/": {
            "get": {
                "operationId": "my-votes_read",
                "description": "ViewSet for users to view their own votes.\nVotes are permanent and cannot be modified or deleted.\nVotes are created through poll vote endpoint",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/UserVote"
                        }
                    }
                },
                "tags": [
                    "my-votes"
                ]
            },
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/polls/": {
            "get": {
                "operationId": "polls_list",
                "description": "Retrieve a list of pollswith filtering options",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Which field to use when ordering the results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "question",
                        "in": "query",
                        "description": "Filter by question text (contains)",
                        "type": "string"
                    },
                    {
                        "name": "creator_email",
                        "in": "query",
                        "description": "Filter by creator_email (contains)",
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (active, upcoming, expired)",
                        "type": "string",
                        "enum": [
                            "active",
                            "upcoming",
                            "expired"
                        ]
                    },
                    {
                        "name": "created_after",
                        "in": "query",
                        "description": "Filter polls created after this date",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "created_before",
                        "in": "query",
                        "description": "Filter polls created before this date",
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Poll"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "post": {
                "operationId": "polls_create",
                "description": "Create a new poll",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": []
        },
        "/polls/active/": {
            "get": {
                "operationId": "polls_active",
                "description": "Get all active polls (current time between start and expiry dates).",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Which field to use when ordering the results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Poll"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": []
        },
        "/polls/my_polls/": {
            "get": {
                "operationId": "polls_my_polls",
                "description": "Get all active polls (current time between start and expiry dates).",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A search term.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Which field to use when ordering the results.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Poll"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": []
        },
        "/polls/{id}/": {
            "get": {
                "operationId": "polls_read",
                "description": "ViewSet for managing polls with comprehensive permission controls.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "put": {
                "operationId": "polls_update",
                "description": "Update a poll that is yet to start",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "patch": {
                "operationId": "polls_partial_update",
                "description": "Update a poll that is yet to start",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "delete": {
                "operationId": "polls_delete",
                "description": "Delete a poll",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "A UUID string identifying this poll.",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }
            ]
        },
        "/polls/{id}/results/": {
            "get": {
                "operationId": "polls_results",
                "description": "Get real-time results for a specific poll",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PollResults"
                        }
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "A UUID string identifying this poll.",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }
            ]
        },
        "/polls/{id}/vote/": {
            "post": {
                "operationId": "polls_vote",
                "description": "Cast a vote on a specific poll",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "option_index": {
                                    "description": "Index of the selected option (0-based)",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vote recorded successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid option or already voted"
                    },
                    "404": {
                        "description": "Poll not found"
                    }
                },
                "tags": [
                    "polls"
                ]
            },
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "A UUID string identifying this poll.",
                    "required": true,
                    "type": "string",
                    "format": "uuid"
                }
            ]
        }
    },
    "definitions": {
        "ChangePassword": {
            "required": [
                "current_password",
                "new_password",
                "new_password_confirm"
            ],
            "type": "object",
            "properties": {
                "current_password": {
                    "title": "Current password",
                    "type": "string",
                    "minLength": 1
                },
                "new_password": {
                    "title": "New password",
                    "type": "string",
                    "minLength": 1
                },
                "new_password_confirm": {
                    "title": "New password confirm",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "UserVote": {
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "poll_id": {
                    "title": "Poll id",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "poll_question": {
                    "title": "Poll question",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "selected_option": {
                    "title": "Selected option",
                    "type": "string",
                    "readOnly": true
                },
                "created_at": {
                    "title": "Created at",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            }
        },
        "Poll": {
            "required": [
                "question",
                "options"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "question": {
                    "title": "Question",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "options": {
                    "title": "Options",
                    "type": "object"
                },
                "is_anonymous": {
                    "title": "Is anonymous",
                    "type": "boolean"
                },
                "created_at": {
                    "title": "Created at",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated_at": {
                    "title": "Updated at",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "owner_email": {
                    "title": "Owner email",
                    "type": "string",
                    "readOnly": true
                },
                "creator_email": {
                    "title": "Creator email",
                    "type": "string",
                    "readOnly": true
                },
                "start_date": {
                    "title": "Start date",
                    "type": "string",
                    "format": "date-time"
                },
                "expiry_date": {
                    "title": "Expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "is_active": {
                    "title": "Is active",
                    "type": "boolean"
                },
                "total_votes": {
                    "title": "Total votes",
                    "type": "string",
                    "readOnly": true
                },
                "has_user_voted": {
                    "title": "Has user voted",
                    "type": "string",
                    "readOnly": true
                },
                "status": {
                    "title": "Status",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "PollCreate": {
            "required": [
                "question",
                "options"
            ],
            "type": "object",
            "properties": {
                "question": {
                    "title": "Question",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "options": {
                    "title": "Options",
                    "type": "object"
                },
                "is_anonymous": {
                    "title": "Is anonymous",
                    "type": "boolean"
                },
                "start_date": {
                    "title": "Start date",
                    "type": "string",
                    "format": "date-time"
                },
                "expiry_date": {
                    "title": "Expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "owner_email": {
                    "title": "Owner email",
                    "type": "string",
                    "readOnly": true
                },
                "creator_email": {
                    "title": "Creator email",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "PollResults": {
            "required": [
                "results"
            ],
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                }
            }
        }
    }
}
